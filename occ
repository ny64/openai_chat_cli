#!/usr/bin/env python3

import datetime
import json
import os
import subprocess
import sys
import tkinter as tk
from tkinter import scrolledtext

from openai import OpenAI

client = OpenAI()

CONFIG_PATH = "./config.json"
CONVERSATIONS_DIRECTORY = "<set directory to store/save conversations>"
SEP = "\n\n> " # Markdown separator string
MODEL = "<set openai model (see https://platform.openai.com/docs/models/overview for more information)>"
COST_PER_1000_TOKENS = 10/1000 # see https://openai.com/pricing


def load_config():
    with open(CONFIG_PATH, 'r') as file:
        return json.load(file)


CONFIG = load_config()


def append_message_to_conversation(conversation_id, sender, message, response=None):

    os.makedirs(CONVERSATIONS_DIRECTORY, exist_ok=True)

    conversation_file = os.path.join(CONVERSATIONS_DIRECTORY, f"{conversation_id}.md")

    with open(conversation_file, 'a') as file:
        file.write(f"{SEP}**{sender}:**\n\n {message}")
        if response:
            file.write(f"{SEP}**AI:**\n\n {response}")


def get_conversation_history(conversation_id):
    conversation_file = os.path.join(CONVERSATIONS_DIRECTORY, f"{conversation_id}.md")
    if os.path.exists(conversation_file):
        with open(conversation_file, 'r') as file:
            content = file.read().strip().split(SEP)
            return content
    return []


def estimate_tokens(text):
    return len(text) / 4


def should_send_request(estimated_tokens):
    estimated_cost = (estimated_tokens / 1000) * COST_PER_1000_TOKENS
    print(f"Estimated cost for this message: ${estimated_cost:.5f}")
    return estimated_cost <= 0.05 or input("Cost exceeds 5 cents. Proceed? (y/n): ").lower() == 'y'


def handle_conversation(conversation_id, message):
    conversation_history = get_conversation_history(conversation_id)
    messages_for_api = [{"role": "assistant", "content": CONFIG['system_message']}]
    for entry in conversation_history:
        sender, content = entry.split(":", 1)
        content = content.strip()
        if "User" in sender:
            messages_for_api.append({"role": "user", "content": content})
        elif "AI" in sender:
            messages_for_api.append({"role": "assistant", "content": content})

    messages_for_api.append({"role": "user", "content": message})

    full_conversation_text = " ".join([m["content"] for m in messages_for_api])
    estimated_tokens = estimate_tokens(full_conversation_text)

    if not should_send_request(estimated_tokens):
        print("Request not sent due to cost concerns.")
        return

    response = client.chat.completions.create(
        model=MODEL,
        messages=messages_for_api,
        temperature=CONFIG['temperature'],
        max_tokens=CONFIG['max_tokens'],
        top_p=CONFIG['top_p'],
        frequency_penalty=CONFIG['frequency_penalty'],
        presence_penalty=CONFIG['presence_penalty']
    )
    response_content = response.choices[0].message.content

    append_message_to_conversation(conversation_id, "User", message, response_content)

    response_file = "response.md"
    with open(response_file, 'w') as file:
        file.write(f"{response_content}")
    subprocess.run(["glow", response_file])
    os.remove(response_file)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        conversation_id = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        print(f"No conversation ID provided, using ID: {conversation_id}")
    elif len(sys.argv) == 2:
        conversation_id = sys.argv[1]
    else:
        print("Usage: turbo [<conversation_id>]. Omit <conversation_id> to auto generate id.")
        sys.exit(1)

    conversation_history = get_conversation_history(conversation_id)
    if conversation_history:
        history_file = "temp_conversation_history.md"
        with open(history_file, 'w') as file:
            file.write(SEP.join(conversation_history))
        subprocess.run(["glow", history_file])
        os.remove(history_file)

    # retrieve terminal size
    rows, columns = os.popen('stty size', 'r').read().split()

    # create textarea for input
    root = tk.Tk()
    root.title('OCC Text Input')
    root.geometry(f"{int(int(columns) * 7.1)}x220+0+{int(int(rows) * 16.8)}")


    def submit_text():
        submit_button.config(state=tk.DISABLED)  # disable submit button
        user_input = text_area.get("1.0", tk.END)
        text_area.delete("1.0", tk.END)  # clear input
        print(">", user_input)
        handle_conversation(conversation_id, user_input)
        submit_button.config(state=tk.NORMAL)


    text_area = scrolledtext.ScrolledText(root, width=10, height=10, wrap=tk.WORD)
    text_area.pack(padx=0, pady=0, fill=tk.BOTH, expand=True)

    submit_button = tk.Button(root, text='Submit', command=submit_text)
    submit_button.pack(side=tk.BOTTOM, pady=10)

    root.mainloop()
